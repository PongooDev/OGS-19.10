#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuickbarBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass QuickbarBase.QuickbarBase_C
// 0x0028 (0x02E8 - 0x02C0)
class UQuickbarBase_C : public UFortQuickbarBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	EFortQuickBars                                MyQuickbarIndex;                                   // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FocusedSlot;                                       // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UFortQuickBarSlotBase*>          QuickbarSlots;                                     // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          IsMaximized;                                       // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortQuickBars                                FocusedQuickbarIndex;                              // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBattleRoyale;                                    // 0x02E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBindMinigameStartAndEndEvents;                    // 0x02E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateSlotVisibility();
	void UpdateInventoryCapacity();
	void UpdateCurrentFocusedQuickbar(EFortQuickBars* PreviousFocusedQuickbar, EFortQuickBars* CurrentFocusedQuickbar);
	void StopUsingAllSlots();
	void ShouldRefreshQuickbarItem(int32 RequestedSlot, int32 CurrentSlot, bool* Result);
	void RefreshQuickbar(bool ForceItemsChanged);
	void OnWorldItemListChanged(const TArray<class UFortWorldItem*>& ItemsAdded, const TArray<class UFortWorldItem*>& ItemsRemoved);
	void OnQuickbarSlotFocusChanged(EFortQuickBars QuickbarIndex, int32 Slot_0);
	void OnQuickbarSecondarySlotFocusChanged_Event_0(EFortQuickBars QuickbarIndex, int32 Slot_0);
	void OnQuickbarContentsChanged(EFortQuickBars QuickbarIndex, const TArray<int32>& ChangedSlots);
	void OnQuickbarForceFullUpdate(EFortQuickBars QuickbarIndex);
	void OnLocalPlayerSpawned();
	void OnLocalPlayerRevived();
	void OnClientExitVolume(class APlayerState* Client, class AFortVolume* Volume);
	void OnLocalPlayerDied(const struct FFortPlayerDeathReport& DeathReport);
	void OnClientEnterVolume(class APlayerState* Client, class AFortVolume* Volume);
	void Minimize();
	void Maximize();
	void Is_Valid_Slot(int32 Slot_0, bool* Is_Valid, int32* Array_Index);
	void HandleQuickbarContentChanged(EFortQuickBars QuickBarType, TArray<int32>& ChangedSlots);
	void HandleKeybindsChanged();
	void ExecuteUbergraph_QuickbarBase(int32 EntryPoint);
	void Destruct();
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"QuickbarBase_C">();
	}
	static class UQuickbarBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuickbarBase_C>();
	}
};
static_assert(alignof(UQuickbarBase_C) == 0x000008, "Wrong alignment on UQuickbarBase_C");
static_assert(sizeof(UQuickbarBase_C) == 0x0002E8, "Wrong size on UQuickbarBase_C");
static_assert(offsetof(UQuickbarBase_C, UberGraphFrame) == 0x0002C0, "Member 'UQuickbarBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UQuickbarBase_C, MyQuickbarIndex) == 0x0002C8, "Member 'UQuickbarBase_C::MyQuickbarIndex' has a wrong offset!");
static_assert(offsetof(UQuickbarBase_C, FocusedSlot) == 0x0002CC, "Member 'UQuickbarBase_C::FocusedSlot' has a wrong offset!");
static_assert(offsetof(UQuickbarBase_C, QuickbarSlots) == 0x0002D0, "Member 'UQuickbarBase_C::QuickbarSlots' has a wrong offset!");
static_assert(offsetof(UQuickbarBase_C, IsMaximized) == 0x0002E0, "Member 'UQuickbarBase_C::IsMaximized' has a wrong offset!");
static_assert(offsetof(UQuickbarBase_C, FocusedQuickbarIndex) == 0x0002E1, "Member 'UQuickbarBase_C::FocusedQuickbarIndex' has a wrong offset!");
static_assert(offsetof(UQuickbarBase_C, IsBattleRoyale) == 0x0002E2, "Member 'UQuickbarBase_C::IsBattleRoyale' has a wrong offset!");
static_assert(offsetof(UQuickbarBase_C, bBindMinigameStartAndEndEvents) == 0x0002E3, "Member 'UQuickbarBase_C::bBindMinigameStartAndEndEvents' has a wrong offset!");

}

