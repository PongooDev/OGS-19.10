#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortVolumeActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortVolumeActor_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass FortVolumeActor.FortVolumeActor_C
// 0x0080 (0x0728 - 0x06A8)
class AFortVolumeActor_C final : public AFortVolumeActor_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_FortVolumeActor_C;                  // 0x06A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortCreativeDynamicXpComponent*        FortCreativeDynamicXp;                             // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCreativeDeferredTaskComponent*         CreativeDeferredTask;                              // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BlockingFaceBottom;                                // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortIslandLocalizationComponent*       FortIslandLocalization;                            // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortPropertyOverrideReplComponent*     FortPropertyOverrideRepl;                          // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BlockingFaceOne;                                   // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BlockingFaceFour;                                  // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BlockingFaceThree;                                 // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BlockingFaceTwo;                                   // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayMessageDispatcherComponent* FortGameplayMessageDispatcher;                     // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCreativeIslandMutatorList_C*           CreativeIslandMutatorList;                         // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVolumeTimeOfDayComponent*          FortVolumeTimeOfDay;                               // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortMinigameVolumeComponent*           FortMinigameVolume;                                // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPlaysetLevelStreamComponent*           PlaysetLevelStream;                                // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortLevelSaveComponent*                LevelSave;                                         // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void OnMinigameSetUp(class AFortMinigame* Minigame);
	void ExecuteUbergraph_FortVolumeActor(int32 EntryPoint);
	void EnableBottomCollision();
	void DisableBottomCollision();
	void BindMinigameDelegates(class AFortMinigame* Minigame, bool BindDelegates);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FortVolumeActor_C">();
	}
	static class AFortVolumeActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortVolumeActor_C>();
	}
};
static_assert(alignof(AFortVolumeActor_C) == 0x000008, "Wrong alignment on AFortVolumeActor_C");
static_assert(sizeof(AFortVolumeActor_C) == 0x000728, "Wrong size on AFortVolumeActor_C");
static_assert(offsetof(AFortVolumeActor_C, UberGraphFrame_FortVolumeActor_C) == 0x0006A8, "Member 'AFortVolumeActor_C::UberGraphFrame_FortVolumeActor_C' has a wrong offset!");
static_assert(offsetof(AFortVolumeActor_C, FortCreativeDynamicXp) == 0x0006B0, "Member 'AFortVolumeActor_C::FortCreativeDynamicXp' has a wrong offset!");
static_assert(offsetof(AFortVolumeActor_C, CreativeDeferredTask) == 0x0006B8, "Member 'AFortVolumeActor_C::CreativeDeferredTask' has a wrong offset!");
static_assert(offsetof(AFortVolumeActor_C, BlockingFaceBottom) == 0x0006C0, "Member 'AFortVolumeActor_C::BlockingFaceBottom' has a wrong offset!");
static_assert(offsetof(AFortVolumeActor_C, FortIslandLocalization) == 0x0006C8, "Member 'AFortVolumeActor_C::FortIslandLocalization' has a wrong offset!");
static_assert(offsetof(AFortVolumeActor_C, FortPropertyOverrideRepl) == 0x0006D0, "Member 'AFortVolumeActor_C::FortPropertyOverrideRepl' has a wrong offset!");
static_assert(offsetof(AFortVolumeActor_C, BlockingFaceOne) == 0x0006D8, "Member 'AFortVolumeActor_C::BlockingFaceOne' has a wrong offset!");
static_assert(offsetof(AFortVolumeActor_C, BlockingFaceFour) == 0x0006E0, "Member 'AFortVolumeActor_C::BlockingFaceFour' has a wrong offset!");
static_assert(offsetof(AFortVolumeActor_C, BlockingFaceThree) == 0x0006E8, "Member 'AFortVolumeActor_C::BlockingFaceThree' has a wrong offset!");
static_assert(offsetof(AFortVolumeActor_C, BlockingFaceTwo) == 0x0006F0, "Member 'AFortVolumeActor_C::BlockingFaceTwo' has a wrong offset!");
static_assert(offsetof(AFortVolumeActor_C, FortGameplayMessageDispatcher) == 0x0006F8, "Member 'AFortVolumeActor_C::FortGameplayMessageDispatcher' has a wrong offset!");
static_assert(offsetof(AFortVolumeActor_C, CreativeIslandMutatorList) == 0x000700, "Member 'AFortVolumeActor_C::CreativeIslandMutatorList' has a wrong offset!");
static_assert(offsetof(AFortVolumeActor_C, FortVolumeTimeOfDay) == 0x000708, "Member 'AFortVolumeActor_C::FortVolumeTimeOfDay' has a wrong offset!");
static_assert(offsetof(AFortVolumeActor_C, FortMinigameVolume) == 0x000710, "Member 'AFortVolumeActor_C::FortMinigameVolume' has a wrong offset!");
static_assert(offsetof(AFortVolumeActor_C, PlaysetLevelStream) == 0x000718, "Member 'AFortVolumeActor_C::PlaysetLevelStream' has a wrong offset!");
static_assert(offsetof(AFortVolumeActor_C, LevelSave) == 0x000720, "Member 'AFortVolumeActor_C::LevelSave' has a wrong offset!");

}

