#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MiniChallengeEntry

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function MiniChallengeEntry.MiniChallengeEntry_C.UpdateQuestDescription
// 0x0018 (0x0018 - 0x0000)
struct MiniChallengeEntry_C_UpdateQuestDescription final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(MiniChallengeEntry_C_UpdateQuestDescription) == 0x000008, "Wrong alignment on MiniChallengeEntry_C_UpdateQuestDescription");
static_assert(sizeof(MiniChallengeEntry_C_UpdateQuestDescription) == 0x000018, "Wrong size on MiniChallengeEntry_C_UpdateQuestDescription");
static_assert(offsetof(MiniChallengeEntry_C_UpdateQuestDescription, Description) == 0x000000, "Member 'MiniChallengeEntry_C_UpdateQuestDescription::Description' has a wrong offset!");

// Function MiniChallengeEntry.MiniChallengeEntry_C.UpdateProgressBar
// 0x000C (0x000C - 0x0000)
struct MiniChallengeEntry_C_UpdateProgressBar final
{
public:
	int32                                         LastKnownCount_0;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AchivedCount_0;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GoalCount_0;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MiniChallengeEntry_C_UpdateProgressBar) == 0x000004, "Wrong alignment on MiniChallengeEntry_C_UpdateProgressBar");
static_assert(sizeof(MiniChallengeEntry_C_UpdateProgressBar) == 0x00000C, "Wrong size on MiniChallengeEntry_C_UpdateProgressBar");
static_assert(offsetof(MiniChallengeEntry_C_UpdateProgressBar, LastKnownCount_0) == 0x000000, "Member 'MiniChallengeEntry_C_UpdateProgressBar::LastKnownCount_0' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_UpdateProgressBar, AchivedCount_0) == 0x000004, "Member 'MiniChallengeEntry_C_UpdateProgressBar::AchivedCount_0' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_UpdateProgressBar, GoalCount_0) == 0x000008, "Member 'MiniChallengeEntry_C_UpdateProgressBar::GoalCount_0' has a wrong offset!");

// Function MiniChallengeEntry.MiniChallengeEntry_C.StyleAsNormal
// 0x0070 (0x0070 - 0x0000)
struct MiniChallengeEntry_C_StyleAsNormal final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGlobalUIContext*                   CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInZone_ReturnValue;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0044(0x0014)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0058(0x0014)()
};
static_assert(alignof(MiniChallengeEntry_C_StyleAsNormal) == 0x000008, "Wrong alignment on MiniChallengeEntry_C_StyleAsNormal");
static_assert(sizeof(MiniChallengeEntry_C_StyleAsNormal) == 0x000070, "Wrong size on MiniChallengeEntry_C_StyleAsNormal");
static_assert(offsetof(MiniChallengeEntry_C_StyleAsNormal, Temp_bool_Variable) == 0x000000, "Member 'MiniChallengeEntry_C_StyleAsNormal::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_StyleAsNormal, Temp_struct_Variable) == 0x000004, "Member 'MiniChallengeEntry_C_StyleAsNormal::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_StyleAsNormal, Temp_struct_Variable_1) == 0x000014, "Member 'MiniChallengeEntry_C_StyleAsNormal::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_StyleAsNormal, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000028, "Member 'MiniChallengeEntry_C_StyleAsNormal::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_StyleAsNormal, CallFunc_IsInZone_ReturnValue) == 0x000030, "Member 'MiniChallengeEntry_C_StyleAsNormal::CallFunc_IsInZone_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_StyleAsNormal, K2Node_Select_Default) == 0x000034, "Member 'MiniChallengeEntry_C_StyleAsNormal::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_StyleAsNormal, K2Node_MakeStruct_SlateColor) == 0x000044, "Member 'MiniChallengeEntry_C_StyleAsNormal::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_StyleAsNormal, K2Node_MakeStruct_SlateColor_1) == 0x000058, "Member 'MiniChallengeEntry_C_StyleAsNormal::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");

// Function MiniChallengeEntry.MiniChallengeEntry_C.StyleAsFirstTimeBoosted
// 0x0038 (0x0038 - 0x0000)
struct MiniChallengeEntry_C_StyleAsFirstTimeBoosted final
{
public:
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0000(0x0014)()
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0020(0x0014)()
};
static_assert(alignof(MiniChallengeEntry_C_StyleAsFirstTimeBoosted) == 0x000008, "Wrong alignment on MiniChallengeEntry_C_StyleAsFirstTimeBoosted");
static_assert(sizeof(MiniChallengeEntry_C_StyleAsFirstTimeBoosted) == 0x000038, "Wrong size on MiniChallengeEntry_C_StyleAsFirstTimeBoosted");
static_assert(offsetof(MiniChallengeEntry_C_StyleAsFirstTimeBoosted, K2Node_MakeStruct_SlateColor) == 0x000000, "Member 'MiniChallengeEntry_C_StyleAsFirstTimeBoosted::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_StyleAsFirstTimeBoosted, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'MiniChallengeEntry_C_StyleAsFirstTimeBoosted::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_StyleAsFirstTimeBoosted, K2Node_MakeStruct_SlateColor_1) == 0x000020, "Member 'MiniChallengeEntry_C_StyleAsFirstTimeBoosted::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");

// Function MiniChallengeEntry.MiniChallengeEntry_C.SetXpValue
// 0x0004 (0x0004 - 0x0000)
struct MiniChallengeEntry_C_SetXpValue final
{
public:
	int32                                         XpRewardValue;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MiniChallengeEntry_C_SetXpValue) == 0x000004, "Wrong alignment on MiniChallengeEntry_C_SetXpValue");
static_assert(sizeof(MiniChallengeEntry_C_SetXpValue) == 0x000004, "Wrong size on MiniChallengeEntry_C_SetXpValue");
static_assert(offsetof(MiniChallengeEntry_C_SetXpValue, XpRewardValue) == 0x000000, "Member 'MiniChallengeEntry_C_SetXpValue::XpRewardValue' has a wrong offset!");

// Function MiniChallengeEntry.MiniChallengeEntry_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct MiniChallengeEntry_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MiniChallengeEntry_C_PreConstruct) == 0x000001, "Wrong alignment on MiniChallengeEntry_C_PreConstruct");
static_assert(sizeof(MiniChallengeEntry_C_PreConstruct) == 0x000001, "Wrong size on MiniChallengeEntry_C_PreConstruct");
static_assert(offsetof(MiniChallengeEntry_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'MiniChallengeEntry_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function MiniChallengeEntry.MiniChallengeEntry_C.ExecuteUbergraph_MiniChallengeEntry
// 0x0440 (0x0440 - 0x0000)
struct MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGlobalUIContext*                   CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInZone_ReturnValue;                     // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable;                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_2;         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_3;         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0078(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0088(0x0010)(ZeroConstructor, NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_2;       // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGlobalUIContext*                   CallFunc_GetLocalPlayerSubsystem_ReturnValue_1;    // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInZone_ReturnValue_1;                   // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Select_Default;                             // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0xC];                                       // 0x00D4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x00E0(0x00B0)()
	float                                         K2Node_Select_Default_2;                           // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0198(0x0040)(HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x01D8(0x0010)(ZeroConstructor, NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_3;       // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_LastKnownCount;                       // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_AchivedCount;                         // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_GoalCount;                            // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_Description;                          // 0x0200(0x0018)(ConstParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0218(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0258(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0268(0x0018)()
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0280(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         K2Node_Event_XpRewardValue;                        // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0298(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x02E0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x02F8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0310(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x0358(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x0398(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x03D8(0x0010)(ReferenceParm)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_3;                          // 0x03E8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x03F8(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue_3;                     // 0x0410(0x0018)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x042C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x043C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x043D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry) == 0x000010, "Wrong alignment on MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry");
static_assert(sizeof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry) == 0x000440, "Wrong size on MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, EntryPoint) == 0x000000, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, Temp_float_Variable) == 0x000004, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, Temp_bool_Variable) == 0x000008, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, Temp_float_Variable_1) == 0x00000C, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, Temp_float_Variable_2) == 0x000010, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000018, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, Temp_float_Variable_3) == 0x000020, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_IsInZone_ReturnValue) == 0x000024, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_IsInZone_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, Temp_bool_Variable_1) == 0x000025, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000028, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000030, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000034, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000038, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00003C, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x000040, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000044, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, Temp_object_Variable) == 0x000048, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Greater_IntInt_ReturnValue) == 0x000050, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000058, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_GetDynamicMaterial_ReturnValue_2) == 0x000060, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_GetDynamicMaterial_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_GetDynamicMaterial_ReturnValue_3) == 0x000068, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_GetDynamicMaterial_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_PlayAnimationForward_ReturnValue) == 0x000070, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_CreateDelegate_OutputDelegate) == 0x000078, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_CreateDelegate_OutputDelegate_1) == 0x000088, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x000098, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_PlayAnimationForward_ReturnValue_2) == 0x0000A0, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_PlayAnimationForward_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, Temp_object_Variable_1) == 0x0000A8, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, Temp_bool_Variable_2) == 0x0000B0, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_GetLocalPlayerSubsystem_ReturnValue_1) == 0x0000B8, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_GetLocalPlayerSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_IsInZone_ReturnValue_1) == 0x0000C0, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_IsInZone_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_Event_IsDesignTime) == 0x0000C1, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_Select_Default) == 0x0000C8, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_Select_Default_1) == 0x0000D0, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_MakeStruct_SlateBrush) == 0x0000E0, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_Select_Default_2) == 0x000190, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_MakeStruct_FormatArgumentData) == 0x000198, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_CreateDelegate_OutputDelegate_2) == 0x0001D8, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_PlayAnimationForward_ReturnValue_3) == 0x0001E8, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_PlayAnimationForward_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_Event_LastKnownCount) == 0x0001F0, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_Event_LastKnownCount' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_Event_AchivedCount) == 0x0001F4, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_Event_AchivedCount' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_Event_GoalCount) == 0x0001F8, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_Event_GoalCount' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_Event_Description) == 0x000200, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_Event_Description' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_MakeStruct_FormatArgumentData_1) == 0x000218, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_MakeArray_Array) == 0x000258, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Format_ReturnValue) == 0x000268, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_CreateDelegate_OutputDelegate_3) == 0x000280, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_Event_XpRewardValue) == 0x000290, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_Event_XpRewardValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_MakeStruct_FormatArgumentData_2) == 0x000298, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Percent_IntInt_ReturnValue) == 0x0002D8, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_MakeArray_Array_1) == 0x0002E0, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Divide_IntInt_ReturnValue) == 0x0002F0, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Format_ReturnValue_1) == 0x0002F8, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_MakeStruct_FormatArgumentData_3) == 0x000310, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000350, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Divide_IntInt_ReturnValue_1) == 0x000354, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_MakeStruct_FormatArgumentData_4) == 0x000358, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_MakeStruct_FormatArgumentData_5) == 0x000398, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_MakeArray_Array_2) == 0x0003D8, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_MakeArray_Array_3) == 0x0003E8, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Format_ReturnValue_2) == 0x0003F8, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Format_ReturnValue_3) == 0x000410, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Format_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000428, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, K2Node_CreateDelegate_OutputDelegate_4) == 0x00042C, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00043C, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry, CallFunc_BooleanAND_ReturnValue) == 0x00043D, "Member 'MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

