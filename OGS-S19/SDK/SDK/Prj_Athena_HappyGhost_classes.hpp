#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prj_Athena_HappyGhost

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Prj_Athena_HappyGhost.Prj_Athena_HappyGhost_C
// 0x0150 (0x0AE8 - 0x0998)
class APrj_Athena_HappyGhost_C final : public AFortAttachableProjectileBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0998(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x09A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x09A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_Athena_HappyGhost_Wire_C*            Rope;                                              // 0x09B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        FortPawn;                                          // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_HappyGhost_Athena_C*                 WeaponActor;                                       // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReelinPlayRate;                                    // 0x09D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Event_ProjSpawned;                                 // 0x09D4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9DC[0x4];                                      // 0x09DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        FX_SpawnItems;                                     // 0x09E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_SpawnItems;                                  // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnItemsTraceOffset;                             // 0x09F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             WaterHit;                                          // 0x09FC(0x009C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UParticleSystem*                        WaterImpactFX;                                     // 0x0A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      WaterHitMat;                                       // 0x0AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitFishReelInRate;                                 // 0x0AA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ItemSpawnDelay;                                    // 0x0AAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Hit_Fish_Sound;                                    // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ItemAttachMinDist;                                 // 0x0AB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ItemAttachDistanceRequirement;                     // 0x0ABC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_Vehicle;                                        // 0x0AC0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         HitReelInRate;                                     // 0x0AE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CustomPickupAttach(class AFortPickup* FortPickup);
	void ExecuteUbergraph_Prj_Athena_HappyGhost(int32 EntryPoint);
	void HandleCost();
	void OnTouched(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FHitResult& HitResult, bool bIsOverlap);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void SendQuestEvent(class AActor* hit_actor);
	void SpawnItemsFX();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Prj_Athena_HappyGhost_C">();
	}
	static class APrj_Athena_HappyGhost_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APrj_Athena_HappyGhost_C>();
	}
};
static_assert(alignof(APrj_Athena_HappyGhost_C) == 0x000008, "Wrong alignment on APrj_Athena_HappyGhost_C");
static_assert(sizeof(APrj_Athena_HappyGhost_C) == 0x000AE8, "Wrong size on APrj_Athena_HappyGhost_C");
static_assert(offsetof(APrj_Athena_HappyGhost_C, UberGraphFrame) == 0x000998, "Member 'APrj_Athena_HappyGhost_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, ParticleSystem) == 0x0009A0, "Member 'APrj_Athena_HappyGhost_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, StaticMesh) == 0x0009A8, "Member 'APrj_Athena_HappyGhost_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, PlayerPawn) == 0x0009B0, "Member 'APrj_Athena_HappyGhost_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, Rope) == 0x0009B8, "Member 'APrj_Athena_HappyGhost_C::Rope' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, FortPawn) == 0x0009C0, "Member 'APrj_Athena_HappyGhost_C::FortPawn' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, WeaponActor) == 0x0009C8, "Member 'APrj_Athena_HappyGhost_C::WeaponActor' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, ReelinPlayRate) == 0x0009D0, "Member 'APrj_Athena_HappyGhost_C::ReelinPlayRate' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, Event_ProjSpawned) == 0x0009D4, "Member 'APrj_Athena_HappyGhost_C::Event_ProjSpawned' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, FX_SpawnItems) == 0x0009E0, "Member 'APrj_Athena_HappyGhost_C::FX_SpawnItems' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, Sound_SpawnItems) == 0x0009E8, "Member 'APrj_Athena_HappyGhost_C::Sound_SpawnItems' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, SpawnItemsTraceOffset) == 0x0009F0, "Member 'APrj_Athena_HappyGhost_C::SpawnItemsTraceOffset' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, WaterHit) == 0x0009FC, "Member 'APrj_Athena_HappyGhost_C::WaterHit' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, WaterImpactFX) == 0x000A98, "Member 'APrj_Athena_HappyGhost_C::WaterImpactFX' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, WaterHitMat) == 0x000AA0, "Member 'APrj_Athena_HappyGhost_C::WaterHitMat' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, HitFishReelInRate) == 0x000AA8, "Member 'APrj_Athena_HappyGhost_C::HitFishReelInRate' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, ItemSpawnDelay) == 0x000AAC, "Member 'APrj_Athena_HappyGhost_C::ItemSpawnDelay' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, Hit_Fish_Sound) == 0x000AB0, "Member 'APrj_Athena_HappyGhost_C::Hit_Fish_Sound' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, ItemAttachMinDist) == 0x000AB8, "Member 'APrj_Athena_HappyGhost_C::ItemAttachMinDist' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, ItemAttachDistanceRequirement) == 0x000ABC, "Member 'APrj_Athena_HappyGhost_C::ItemAttachDistanceRequirement' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, TC_Vehicle) == 0x000AC0, "Member 'APrj_Athena_HappyGhost_C::TC_Vehicle' has a wrong offset!");
static_assert(offsetof(APrj_Athena_HappyGhost_C, HitReelInRate) == 0x000AE0, "Member 'APrj_Athena_HappyGhost_C::HitReelInRate' has a wrong offset!");

}

