#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Athena_JellyFish_AOE_Heal

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Athena_JellyFish_AOE_Heal.GA_Athena_JellyFish_AOE_Heal_C
// 0x0130 (0x0BD8 - 0x0AA8)
class UGA_Athena_JellyFish_AOE_Heal_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AA8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HealsHealth;                                       // 0x0AB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasHealthCap;                                      // 0x0AB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ABA[0x2];                                      // 0x0ABA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HealthHealAmount;                                  // 0x0ABC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TriggerDuration;                                   // 0x0AC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldHolster;                                     // 0x0AC4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC5[0x3];                                      // 0x0AC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemIDToHolster;                                   // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_PotionConsumed;                                 // 0x0AD0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_EffectToApply;                                  // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HealsShields;                                      // 0x0AE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasShieldCap;                                      // 0x0AE1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE2[0x2];                                      // 0x0AE2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShieldHealAmount;                                  // 0x0AE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_ShieldCap;                                     // 0x0AE8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_ShieldAmount;                                  // 0x0B10(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_HealthCap;                                     // 0x0B38(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_HealthAmount;                                  // 0x0B60(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tags_FailedResponse;                               // 0x0B88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IgnoreCalcsForEffectApplication;                   // 0x0BA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysActivate;                                    // 0x0BA9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BAA[0x2];                                      // 0x0BAA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EquippingCue;                                      // 0x0BAC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         OverHealing;                                       // 0x0BB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HealthIsEffective;                                 // 0x0BB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB9[0x7];                                      // 0x0BB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   ForceFeedback;                                     // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ExplodeCue;                                        // 0x0BC8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        TargetPawn;                                        // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyCurieWater(const struct FVector& InputPin);
	void Cancelled_39BB44CE4B5ACBFAF09C9C960F1A3644(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_D9F6D24A49ABE8D7AAC30785C1A8DF0C(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_39BB44CE4B5ACBFAF09C9C960F1A3644(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void ExecuteUbergraph_GA_Athena_JellyFish_AOE_Heal(int32 EntryPoint);
	void HealthCalc();
	void K2_ActivateAbility();
	void K2_CommitExecute();
	void K2_OnEndAbility(bool bWasCancelled);
	void MakeCustomMontageInfo();
	void OnMontageTriggered();
	void SetupGE(struct FGameplayEffectSpecHandle* Effect_Out);
	void ShieldCalc();
	void Targeted_D9F6D24A49ABE8D7AAC30785C1A8DF0C(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Triggered_39BB44CE4B5ACBFAF09C9C960F1A3644(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);

	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Athena_JellyFish_AOE_Heal_C">();
	}
	static class UGA_Athena_JellyFish_AOE_Heal_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Athena_JellyFish_AOE_Heal_C>();
	}
};
static_assert(alignof(UGA_Athena_JellyFish_AOE_Heal_C) == 0x000008, "Wrong alignment on UGA_Athena_JellyFish_AOE_Heal_C");
static_assert(sizeof(UGA_Athena_JellyFish_AOE_Heal_C) == 0x000BD8, "Wrong size on UGA_Athena_JellyFish_AOE_Heal_C");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, UberGraphFrame) == 0x000AA8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, PlayerPawn) == 0x000AB0, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, HealsHealth) == 0x000AB8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::HealsHealth' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, HasHealthCap) == 0x000AB9, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::HasHealthCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, HealthHealAmount) == 0x000ABC, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::HealthHealAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, TriggerDuration) == 0x000AC0, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::TriggerDuration' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, ShouldHolster) == 0x000AC4, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::ShouldHolster' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, ItemIDToHolster) == 0x000AC8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::ItemIDToHolster' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, GC_PotionConsumed) == 0x000AD0, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::GC_PotionConsumed' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, GE_EffectToApply) == 0x000AD8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::GE_EffectToApply' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, HealsShields) == 0x000AE0, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::HealsShields' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, HasShieldCap) == 0x000AE1, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::HasShieldCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, ShieldHealAmount) == 0x000AE4, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::ShieldHealAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, Row_ShieldCap) == 0x000AE8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::Row_ShieldCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, Row_ShieldAmount) == 0x000B10, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::Row_ShieldAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, Row_HealthCap) == 0x000B38, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::Row_HealthCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, Row_HealthAmount) == 0x000B60, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::Row_HealthAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, Tags_FailedResponse) == 0x000B88, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::Tags_FailedResponse' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, IgnoreCalcsForEffectApplication) == 0x000BA8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::IgnoreCalcsForEffectApplication' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, AlwaysActivate) == 0x000BA9, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::AlwaysActivate' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, EquippingCue) == 0x000BAC, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::EquippingCue' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, OverHealing) == 0x000BB4, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::OverHealing' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, HealthIsEffective) == 0x000BB8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::HealthIsEffective' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, ForceFeedback) == 0x000BC0, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::ForceFeedback' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, ExplodeCue) == 0x000BC8, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::ExplodeCue' has a wrong offset!");
static_assert(offsetof(UGA_Athena_JellyFish_AOE_Heal_C, TargetPawn) == 0x000BD0, "Member 'UGA_Athena_JellyFish_AOE_Heal_C::TargetPawn' has a wrong offset!");

}

