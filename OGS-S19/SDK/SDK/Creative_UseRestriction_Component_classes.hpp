#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Creative_UseRestriction_Component

#include "Basic.hpp"

#include "Creative_DeviceComponent_Parent_classes.hpp"
#include "ECreativeClassSpecialCases_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Creative_UseRestriction_Component.Creative_UseRestriction_Component_C
// 0x01C0 (0x0278 - 0x00B8)
class UCreative_UseRestriction_Component_C final : public UCreative_DeviceComponent_Parent_C
{
public:
	class UCreative_Enabled_Component_C*          EnabledComponent;                                  // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortMinigameLogicComponent*            MinigameLogic;                                     // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortItemDefinition*                    Required_Item;                                     // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Required_Item_Quantity;                            // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Require_Play_Mode;                                 // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Enabled_Fail_Reason;                               // 0x00D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Team_Fail_Reason;                                  // 0x00F0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Class_Fail_Reason;                                 // 0x0108(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Item_Fail_Reason;                                  // 0x0120(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Play_Mode_Fail_Reason;                             // 0x0138(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UToyOptionsComponent_C*                 ToyOptions;                                        // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<int32>                                   Valid_Team_List;                                   // 0x0158(0x0050)(Edit, BlueprintVisible)
	int32                                         Invalid_Number;                                    // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AFortPlayerPawn*, class AFortPlayerController*> OverlappingPawnControllerMap;                      // 0x01B0(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class AFortPlayerPawn* FortPlayerPawn, class AFortPlayerController* Player_Controller)> Pawn_Now_Has_Controller;                           // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Allow_Actors_without_Controllers;                  // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Number_of_Classes;                                 // 0x0214(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<int32>                                   Valid_Class_List;                                  // 0x0218(0x0050)(Edit, BlueprintVisible, ExposeOnSpawn)
	int32                                         No_Class_ID;                                       // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invert_Class_and_Team_Checks;                      // 0x026C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_Server_Print_State_Checks;                   // 0x026D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_Client_Print_State_Checks;                   // 0x026E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26F[0x1];                                      // 0x026F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AffectsAllButSelectedValue;                        // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UnbindEventPawnPossesed(class AActor* PlayerPawnToUnbind);
	bool State_Checks(const class AActor* Actor_to_Check, bool AND);
	void SetTeamsWithAffects(int32 Team_Index, bool AffectsAllButSelected);
	void SetClassWithAffectsSafeTeamIndex(int32 Class_Index, bool AffectsAllButSelected);
	void Set_Initial_Single_Team(int32 Team_Index);
	void Set_Initial_Single_Class(int32 Class_Index);
	void Set_Class_with_Affects(int32 Class_Index, bool AffectsAllButSelected, bool UsesSafeTeamIndexing);
	void Remove_Pawn_from_Cache(const class AFortPlayerPawn*& Pawn);
	void Remove_Classes(TArray<int32>& Classes);
	void IsValidTeam(const class AActor* Actor_to_Check, bool* Valid);
	void IsValidPlayState(bool* TRUE_0);
	void IsValidClass(class AActor* Actor, bool* TRUE_0);
	void IsHoldingItem(class AActor* Actor, bool* TRUE_0, class FText* Item_Name);
	void IsEnabled(bool* TRUE_0);
	void Print_State_Checks(class AActor* Actor);
	void On_Pawn_Destroyed(class AActor* Actor, EEndPlayReason EndPlayReason);
	void Initialize_Component_with_Affects(class UFortMinigameLogicComponent* MinigameLogic_0, class UCreative_Enabled_Component_C* EnabledComponent_0, class UToyOptionsComponent_C* ToyOptionsComponent, int32 Required_Single_Team, int32 Required_Class, class UFortItemDefinition* Required_Item_0, int32 Required_Item_Quantity_0, bool TeamAffectsAllButSelected, bool ClassAffectsAllButSelected, bool UsesSafeClassIndexing);
	void Initialize_Component(class UFortMinigameLogicComponent* MinigameLogic_0, class UCreative_Enabled_Component_C* EnabledComponent_0, class UToyOptionsComponent_C* ToyOptionsComponent, int32 Required_Single_Team, int32 Required_Class, class UFortItemDefinition* Required_Item_0, int32 Required_Item_Quantity_0);
	void Get_Last_Player_Controller(class AActor* Actor, class AFortPlayerController** FortPC);
	void Get_Failure_Reasons(class APawn* Pawn, const class FText& Device_Failure_Reason, bool Append_Device_Reason, class FText* Reasons);
	void Can_Actor_Interact(class AActor* Actor, bool Additional_Checks, bool OR_can_Customize_Device, bool* TRUE_0);
	void Empty_Player_Pawn_Possessed(class APawn* Pawn);
	void Can_Player_Controller_Interact(class APlayerController* PC, bool Additional_Checks, bool OR_can_Customize_Device, bool* TRUE_0);
	void Can_Edit_Options(class APlayerController* PC, bool* TRUE_0);
	void Controller_Link(const class AFortPlayerPawn*& Pawn, const class AFortPlayerController*& Controller);
	void Add_Valid_Classes(TArray<int32>& Class_List);
	void Actor_has_Valid_Controller(class AActor* Actor, bool Include_Restriction_Check, bool Additional_Checks, bool* Valid_Controller, class AFortPlayerPawn** FortPlayerPawn, class APlayerController** PlayerController);

	void Test_Matching_Team(int32 TeamValue, bool* TRUE_0) const;
	void Test_Matching_Class(int32 Class_Index, bool* TRUE_0) const;
	int32 GetNumberOfTeams() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Creative_UseRestriction_Component_C">();
	}
	static class UCreative_UseRestriction_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreative_UseRestriction_Component_C>();
	}
};
static_assert(alignof(UCreative_UseRestriction_Component_C) == 0x000008, "Wrong alignment on UCreative_UseRestriction_Component_C");
static_assert(sizeof(UCreative_UseRestriction_Component_C) == 0x000278, "Wrong size on UCreative_UseRestriction_Component_C");
static_assert(offsetof(UCreative_UseRestriction_Component_C, EnabledComponent) == 0x0000B8, "Member 'UCreative_UseRestriction_Component_C::EnabledComponent' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, MinigameLogic) == 0x0000C0, "Member 'UCreative_UseRestriction_Component_C::MinigameLogic' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Required_Item) == 0x0000C8, "Member 'UCreative_UseRestriction_Component_C::Required_Item' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Required_Item_Quantity) == 0x0000D0, "Member 'UCreative_UseRestriction_Component_C::Required_Item_Quantity' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Require_Play_Mode) == 0x0000D4, "Member 'UCreative_UseRestriction_Component_C::Require_Play_Mode' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Enabled_Fail_Reason) == 0x0000D8, "Member 'UCreative_UseRestriction_Component_C::Enabled_Fail_Reason' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Team_Fail_Reason) == 0x0000F0, "Member 'UCreative_UseRestriction_Component_C::Team_Fail_Reason' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Class_Fail_Reason) == 0x000108, "Member 'UCreative_UseRestriction_Component_C::Class_Fail_Reason' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Item_Fail_Reason) == 0x000120, "Member 'UCreative_UseRestriction_Component_C::Item_Fail_Reason' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Play_Mode_Fail_Reason) == 0x000138, "Member 'UCreative_UseRestriction_Component_C::Play_Mode_Fail_Reason' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, ToyOptions) == 0x000150, "Member 'UCreative_UseRestriction_Component_C::ToyOptions' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Valid_Team_List) == 0x000158, "Member 'UCreative_UseRestriction_Component_C::Valid_Team_List' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Invalid_Number) == 0x0001A8, "Member 'UCreative_UseRestriction_Component_C::Invalid_Number' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, OverlappingPawnControllerMap) == 0x0001B0, "Member 'UCreative_UseRestriction_Component_C::OverlappingPawnControllerMap' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Pawn_Now_Has_Controller) == 0x000200, "Member 'UCreative_UseRestriction_Component_C::Pawn_Now_Has_Controller' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Allow_Actors_without_Controllers) == 0x000210, "Member 'UCreative_UseRestriction_Component_C::Allow_Actors_without_Controllers' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Number_of_Classes) == 0x000214, "Member 'UCreative_UseRestriction_Component_C::Number_of_Classes' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Valid_Class_List) == 0x000218, "Member 'UCreative_UseRestriction_Component_C::Valid_Class_List' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, No_Class_ID) == 0x000268, "Member 'UCreative_UseRestriction_Component_C::No_Class_ID' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Invert_Class_and_Team_Checks) == 0x00026C, "Member 'UCreative_UseRestriction_Component_C::Invert_Class_and_Team_Checks' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Debug_Server_Print_State_Checks) == 0x00026D, "Member 'UCreative_UseRestriction_Component_C::Debug_Server_Print_State_Checks' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, Debug_Client_Print_State_Checks) == 0x00026E, "Member 'UCreative_UseRestriction_Component_C::Debug_Client_Print_State_Checks' has a wrong offset!");
static_assert(offsetof(UCreative_UseRestriction_Component_C, AffectsAllButSelectedValue) == 0x000270, "Member 'UCreative_UseRestriction_Component_C::AffectsAllButSelectedValue' has a wrong offset!");

}

