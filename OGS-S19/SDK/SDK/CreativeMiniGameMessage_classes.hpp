#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CreativeMiniGameMessage

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass CreativeMiniGameMessage.CreativeMiniGameMessage_C
// 0x0048 (0x02F8 - 0x02B0)
class UCreativeMiniGameMessage_C final : public UFortHUDElementWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCreativeMiniGameInfoWidget_C*          CreativeMiniGameInfoWidget;                        // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bShouldShowMessage;                                // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           VolumeBindingHandler;                              // 0x02C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         TryAttempts;                                       // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                MobilePadding;                                     // 0x02D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FMargin                                DefaultPadding;                                    // 0x02E4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void UpdateVisibility(class AFortMinigame* MinigameToCheck);
	void UnbindGlobalEvents();
	void TrySetup();
	void UnBindMiniGameEvents();
	void ShouldRetry(bool* bShouldRetry);
	void SetVisibilityForPublishedIslands(class AFortMinigame* MinigameToCheck, bool* bIsVisible);
	void OnLeaveIsland(class AFortPlayerPawn* PlayerPawn);
	void OnStartingGame();
	void OnEnterVolume(class APlayerState* Client, class AFortVolume* Volume);
	void HandleLoadingScreenChanged(class AFortPlayerControllerAthena* PlayerController, bool bEnabled, const class FText& HUDReasonText);
	class AFortMinigame* GetMinigameHelper(class AFortVolume* VolumeToCheck);
	void OnMinigameStateChanged(class AFortMinigame* ChangedMinigame, EFortMinigameState MinigameState);
	void FinishVolumeBinding();
	void ExecuteUbergraph_CreativeMiniGameMessage(int32 EntryPoint);
	void DisableMessage();
	void Destruct();
	void Construct();
	void BindMiniGameEvents(class AFortVolume* MinigameVolume);
	void BindGlobalEvents();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CreativeMiniGameMessage_C">();
	}
	static class UCreativeMiniGameMessage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreativeMiniGameMessage_C>();
	}
};
static_assert(alignof(UCreativeMiniGameMessage_C) == 0x000008, "Wrong alignment on UCreativeMiniGameMessage_C");
static_assert(sizeof(UCreativeMiniGameMessage_C) == 0x0002F8, "Wrong size on UCreativeMiniGameMessage_C");
static_assert(offsetof(UCreativeMiniGameMessage_C, UberGraphFrame) == 0x0002B0, "Member 'UCreativeMiniGameMessage_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCreativeMiniGameMessage_C, CreativeMiniGameInfoWidget) == 0x0002B8, "Member 'UCreativeMiniGameMessage_C::CreativeMiniGameInfoWidget' has a wrong offset!");
static_assert(offsetof(UCreativeMiniGameMessage_C, bShouldShowMessage) == 0x0002C0, "Member 'UCreativeMiniGameMessage_C::bShouldShowMessage' has a wrong offset!");
static_assert(offsetof(UCreativeMiniGameMessage_C, VolumeBindingHandler) == 0x0002C8, "Member 'UCreativeMiniGameMessage_C::VolumeBindingHandler' has a wrong offset!");
static_assert(offsetof(UCreativeMiniGameMessage_C, TryAttempts) == 0x0002D0, "Member 'UCreativeMiniGameMessage_C::TryAttempts' has a wrong offset!");
static_assert(offsetof(UCreativeMiniGameMessage_C, MobilePadding) == 0x0002D4, "Member 'UCreativeMiniGameMessage_C::MobilePadding' has a wrong offset!");
static_assert(offsetof(UCreativeMiniGameMessage_C, DefaultPadding) == 0x0002E4, "Member 'UCreativeMiniGameMessage_C::DefaultPadding' has a wrong offset!");

}

