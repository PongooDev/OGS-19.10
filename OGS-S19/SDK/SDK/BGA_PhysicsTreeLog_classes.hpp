#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_PhysicsTreeLog

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "FluidForceDynamic_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_PhysicsTreeLog.BGA_PhysicsTreeLog_C
// 0x0218 (0x0F60 - 0x0D48)
class ABGA_PhysicsTreeLog_C final : public ABuildingProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D48(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCapsuleComponent*                      WaterInteractMiddle;                               // 0x0D50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      WaterInteractBottom;                               // 0x0D58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      WaterInteractTop;                                  // 0x0D60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Physics_Tree_Environment_Impact;                // 0x0D68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FScalableFloat>                 PlayerImpactTiers;                                 // 0x0D70(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FScalableFloat>                 PlayerImpulseTiers;                                // 0x0D80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                LastImpactNormal;                                  // 0x0D90(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9C[0x4];                                      // 0x0D9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         VerticalImpulseRatio;                              // 0x0DA0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UBuoyancyComponent*                     BuoyancyComponent;                                 // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NextImminentCollisionTime;                         // 0x0DD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeBetweenImminentCollisions;                     // 0x0DD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MatReference;                                      // 0x0DD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BreakTreeDamage;                                   // 0x0DE0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         NextPotentialLaunchTime;                           // 0x0DE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchDelay;                                       // 0x0DE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TreeDestructionBurstCue;                           // 0x0DEC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DF4[0xC];                                      // 0x0DF4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TreeDestructionTransform;                          // 0x0E00(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         CachedDamageValue;                                 // 0x0E30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SnowTimerValue;                                    // 0x0E34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SnowRemovalTimerHandle;                            // 0x0E38(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFXSystemComponent*                     WaterFxPhysicsTreeMiddle;                          // 0x0E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UFXSystemComponent*>             FxSystemArray;                                     // 0x0E48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         WaterFxPlaneDepth;                                 // 0x0E58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WaterFxPlaneLocation;                              // 0x0E5C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WaterFxIndex;                                      // 0x0E68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E6C[0x4];                                      // 0x0E6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemComponent*                     WaterFxPhysicsTreeTop;                             // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFXSystemComponent*                     WaterFxPhysicsTreeBottom;                          // 0x0E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WaterSurfaceInfoTimer;                             // 0x0E80(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WaterFxPlaneNormal;                                // 0x0E88(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E94[0x4];                                      // 0x0E94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_FluidSim_FN_C*                      FluidSim;                                          // 0x0E98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class FName>                Sockets_And_Endpoints;                             // 0x0EA0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFluidForceDynamic                     Fluid_Force_Dynamic;                               // 0x0EF0(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)

public:
	void AdjustWaterSettings();
	void AwakeStateChanged(class UPrimitiveComponent* SimulatingComponent, bool bIsAwake);
	void BndEvt__BGA_PhysicsTreeLog_WaterInteractBottom_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BGA_PhysicsTreeLog_WaterInteractBottom_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BGA_PhysicsTreeLog_WaterInteractMiddle_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BGA_PhysicsTreeLog_WaterInteractMiddle_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BGA_PhysicsTreeLog_WaterInteractTop_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BGA_PhysicsTreeLog_WaterInteractTop_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void CE_SplashInWater(const struct FVector& SplashLocation);
	void Control2dSimForces();
	void ExecuteUbergraph_BGA_PhysicsTreeLog(int32 EntryPoint);
	class AB_PhysicsTree_Reporter_C* GetAnalyticsReporterActor(bool* Success);
	void GetPlayerImpulseVelocityFromImpactVelocity(float Impact, bool* Minimum_Met, float* Impulse);
	void LogDamaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnComponentHit_Event_0(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnRep_BreakTreeDamage();
	void OnVehicleHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveBeginPlay();
	void RemoveSnow();
	void ReportTreeFellingToAnalytics(class AActor* FelledBy);
	void Update_Water_FX();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_PhysicsTreeLog_C">();
	}
	static class ABGA_PhysicsTreeLog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_PhysicsTreeLog_C>();
	}
};
static_assert(alignof(ABGA_PhysicsTreeLog_C) == 0x000010, "Wrong alignment on ABGA_PhysicsTreeLog_C");
static_assert(sizeof(ABGA_PhysicsTreeLog_C) == 0x000F60, "Wrong size on ABGA_PhysicsTreeLog_C");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, UberGraphFrame) == 0x000D48, "Member 'ABGA_PhysicsTreeLog_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterInteractMiddle) == 0x000D50, "Member 'ABGA_PhysicsTreeLog_C::WaterInteractMiddle' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterInteractBottom) == 0x000D58, "Member 'ABGA_PhysicsTreeLog_C::WaterInteractBottom' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterInteractTop) == 0x000D60, "Member 'ABGA_PhysicsTreeLog_C::WaterInteractTop' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, NS_Physics_Tree_Environment_Impact) == 0x000D68, "Member 'ABGA_PhysicsTreeLog_C::NS_Physics_Tree_Environment_Impact' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, PlayerImpactTiers) == 0x000D70, "Member 'ABGA_PhysicsTreeLog_C::PlayerImpactTiers' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, PlayerImpulseTiers) == 0x000D80, "Member 'ABGA_PhysicsTreeLog_C::PlayerImpulseTiers' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, LastImpactNormal) == 0x000D90, "Member 'ABGA_PhysicsTreeLog_C::LastImpactNormal' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, VerticalImpulseRatio) == 0x000DA0, "Member 'ABGA_PhysicsTreeLog_C::VerticalImpulseRatio' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, BuoyancyComponent) == 0x000DC8, "Member 'ABGA_PhysicsTreeLog_C::BuoyancyComponent' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, NextImminentCollisionTime) == 0x000DD0, "Member 'ABGA_PhysicsTreeLog_C::NextImminentCollisionTime' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, TimeBetweenImminentCollisions) == 0x000DD4, "Member 'ABGA_PhysicsTreeLog_C::TimeBetweenImminentCollisions' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, MatReference) == 0x000DD8, "Member 'ABGA_PhysicsTreeLog_C::MatReference' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, BreakTreeDamage) == 0x000DE0, "Member 'ABGA_PhysicsTreeLog_C::BreakTreeDamage' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, NextPotentialLaunchTime) == 0x000DE4, "Member 'ABGA_PhysicsTreeLog_C::NextPotentialLaunchTime' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, LaunchDelay) == 0x000DE8, "Member 'ABGA_PhysicsTreeLog_C::LaunchDelay' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, TreeDestructionBurstCue) == 0x000DEC, "Member 'ABGA_PhysicsTreeLog_C::TreeDestructionBurstCue' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, TreeDestructionTransform) == 0x000E00, "Member 'ABGA_PhysicsTreeLog_C::TreeDestructionTransform' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, CachedDamageValue) == 0x000E30, "Member 'ABGA_PhysicsTreeLog_C::CachedDamageValue' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, SnowTimerValue) == 0x000E34, "Member 'ABGA_PhysicsTreeLog_C::SnowTimerValue' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, SnowRemovalTimerHandle) == 0x000E38, "Member 'ABGA_PhysicsTreeLog_C::SnowRemovalTimerHandle' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterFxPhysicsTreeMiddle) == 0x000E40, "Member 'ABGA_PhysicsTreeLog_C::WaterFxPhysicsTreeMiddle' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, FxSystemArray) == 0x000E48, "Member 'ABGA_PhysicsTreeLog_C::FxSystemArray' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterFxPlaneDepth) == 0x000E58, "Member 'ABGA_PhysicsTreeLog_C::WaterFxPlaneDepth' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterFxPlaneLocation) == 0x000E5C, "Member 'ABGA_PhysicsTreeLog_C::WaterFxPlaneLocation' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterFxIndex) == 0x000E68, "Member 'ABGA_PhysicsTreeLog_C::WaterFxIndex' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterFxPhysicsTreeTop) == 0x000E70, "Member 'ABGA_PhysicsTreeLog_C::WaterFxPhysicsTreeTop' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterFxPhysicsTreeBottom) == 0x000E78, "Member 'ABGA_PhysicsTreeLog_C::WaterFxPhysicsTreeBottom' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterSurfaceInfoTimer) == 0x000E80, "Member 'ABGA_PhysicsTreeLog_C::WaterSurfaceInfoTimer' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterFxPlaneNormal) == 0x000E88, "Member 'ABGA_PhysicsTreeLog_C::WaterFxPlaneNormal' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, FluidSim) == 0x000E98, "Member 'ABGA_PhysicsTreeLog_C::FluidSim' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, Sockets_And_Endpoints) == 0x000EA0, "Member 'ABGA_PhysicsTreeLog_C::Sockets_And_Endpoints' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, Fluid_Force_Dynamic) == 0x000EF0, "Member 'ABGA_PhysicsTreeLog_C::Fluid_Force_Dynamic' has a wrong offset!");

}

