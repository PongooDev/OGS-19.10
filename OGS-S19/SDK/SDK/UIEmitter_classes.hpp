#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIEmitter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UIEmitter.UIEmitter_C
// 0x0060 (0x02A8 - 0x0248)
class UUIEmitter_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UOverlay*                               Overlay_Emitter;                                   // 0x0250(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIEmitterElement_C*                    UIEmmitterElement;                                 // 0x0258(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UMaterialInstance*>              Materials;                                         // 0x0260(0x0010)(Edit, BlueprintVisible)
	int32                                         MaxElements;                                       // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              AngleRange;                                        // 0x0274(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              DistanceRange;                                     // 0x027C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ParticleLifeRange;                                 // 0x0284(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SpinSpeedRange;                                    // 0x028C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SizeRange;                                         // 0x0294(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              EmitterLifeRange;                                  // 0x029C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          runOnce;                                           // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartAutomatically;                                // 0x02A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EmitterExpired;                                    // 0x02A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void StartEmitter();
	void SetImage(class UUIEmitterElement_C* EmitterElement);
	void PreConstruct(bool IsDesignTime);
	void ExecuteUbergraph_UIEmitter(int32 EntryPoint);
	void CreateEmitterElement();
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UIEmitter_C">();
	}
	static class UUIEmitter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIEmitter_C>();
	}
};
static_assert(alignof(UUIEmitter_C) == 0x000008, "Wrong alignment on UUIEmitter_C");
static_assert(sizeof(UUIEmitter_C) == 0x0002A8, "Wrong size on UUIEmitter_C");
static_assert(offsetof(UUIEmitter_C, UberGraphFrame) == 0x000248, "Member 'UUIEmitter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, Overlay_Emitter) == 0x000250, "Member 'UUIEmitter_C::Overlay_Emitter' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, UIEmmitterElement) == 0x000258, "Member 'UUIEmitter_C::UIEmmitterElement' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, Materials) == 0x000260, "Member 'UUIEmitter_C::Materials' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, MaxElements) == 0x000270, "Member 'UUIEmitter_C::MaxElements' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, AngleRange) == 0x000274, "Member 'UUIEmitter_C::AngleRange' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, DistanceRange) == 0x00027C, "Member 'UUIEmitter_C::DistanceRange' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, ParticleLifeRange) == 0x000284, "Member 'UUIEmitter_C::ParticleLifeRange' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, SpinSpeedRange) == 0x00028C, "Member 'UUIEmitter_C::SpinSpeedRange' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, SizeRange) == 0x000294, "Member 'UUIEmitter_C::SizeRange' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, EmitterLifeRange) == 0x00029C, "Member 'UUIEmitter_C::EmitterLifeRange' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, runOnce) == 0x0002A4, "Member 'UUIEmitter_C::runOnce' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, StartAutomatically) == 0x0002A5, "Member 'UUIEmitter_C::StartAutomatically' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, EmitterExpired) == 0x0002A6, "Member 'UUIEmitter_C::EmitterExpired' has a wrong offset!");

}

