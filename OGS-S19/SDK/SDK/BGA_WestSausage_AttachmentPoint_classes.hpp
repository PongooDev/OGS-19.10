#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_WestSausage_AttachmentPoint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_WestSausage_AttachmentPoint.BGA_WestSausage_AttachmentPoint_C
// 0x0078 (0x0938 - 0x08C0)
class ABGA_WestSausage_AttachmentPoint_C final : public ABuildingGameplayActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x08C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Rope;                                              // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Anchor;                                            // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Collider;                                          // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AB_Ranged_WestSausage_Parallel_Athena_C* Weapon;                                            // 0x08E0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class APlayerPawn_Athena_C*                   Player;                                            // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           WebHitCue;                                         // 0x08F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer;                                             // 0x08F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRopeLength;                                     // 0x0900(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RopeMeshLengthMultiplier;                          // 0x0904(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SwingVector;                                       // 0x0908(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SwingLength;                                       // 0x0914(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SwingAngleAudioParam;                              // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SwingLengthAudioParam;                             // 0x091C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SwingSpeedAudioParam;                              // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugAudioParams;                                 // 0x0924(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_925[0x3];                                      // 0x0925(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_WebWasShot;                                     // 0x0928(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDestroy;                                     // 0x0930(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_931[0x3];                                      // 0x0931(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Done_;                                             // 0x0934(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void Destroy_Self();
	void Destroy_Self_fromRep();
	void Detach_Multicast();
	void Done();
	void Done__from_notify_();
	void Done_Server();
	void ExecuteUbergraph_BGA_WestSausage_AttachmentPoint(int32 EntryPoint);
	void FallMulticast(const struct FHitResult& HitResult);
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnRep_Done_();
	void OnRep_ShouldDestroy();
	void ParentDestroyed(class AActor* DestroyedActor);
	void ParentDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_WestSausage_AttachmentPoint_C">();
	}
	static class ABGA_WestSausage_AttachmentPoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_WestSausage_AttachmentPoint_C>();
	}
};
static_assert(alignof(ABGA_WestSausage_AttachmentPoint_C) == 0x000008, "Wrong alignment on ABGA_WestSausage_AttachmentPoint_C");
static_assert(sizeof(ABGA_WestSausage_AttachmentPoint_C) == 0x000938, "Wrong size on ABGA_WestSausage_AttachmentPoint_C");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, UberGraphFrame) == 0x0008C0, "Member 'ABGA_WestSausage_AttachmentPoint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, Rope) == 0x0008C8, "Member 'ABGA_WestSausage_AttachmentPoint_C::Rope' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, Anchor) == 0x0008D0, "Member 'ABGA_WestSausage_AttachmentPoint_C::Anchor' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, Collider) == 0x0008D8, "Member 'ABGA_WestSausage_AttachmentPoint_C::Collider' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, Weapon) == 0x0008E0, "Member 'ABGA_WestSausage_AttachmentPoint_C::Weapon' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, Player) == 0x0008E8, "Member 'ABGA_WestSausage_AttachmentPoint_C::Player' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, WebHitCue) == 0x0008F0, "Member 'ABGA_WestSausage_AttachmentPoint_C::WebHitCue' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, Timer) == 0x0008F8, "Member 'ABGA_WestSausage_AttachmentPoint_C::Timer' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, MaxRopeLength) == 0x000900, "Member 'ABGA_WestSausage_AttachmentPoint_C::MaxRopeLength' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, RopeMeshLengthMultiplier) == 0x000904, "Member 'ABGA_WestSausage_AttachmentPoint_C::RopeMeshLengthMultiplier' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, SwingVector) == 0x000908, "Member 'ABGA_WestSausage_AttachmentPoint_C::SwingVector' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, SwingLength) == 0x000914, "Member 'ABGA_WestSausage_AttachmentPoint_C::SwingLength' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, SwingAngleAudioParam) == 0x000918, "Member 'ABGA_WestSausage_AttachmentPoint_C::SwingAngleAudioParam' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, SwingLengthAudioParam) == 0x00091C, "Member 'ABGA_WestSausage_AttachmentPoint_C::SwingLengthAudioParam' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, SwingSpeedAudioParam) == 0x000920, "Member 'ABGA_WestSausage_AttachmentPoint_C::SwingSpeedAudioParam' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, bDebugAudioParams) == 0x000924, "Member 'ABGA_WestSausage_AttachmentPoint_C::bDebugAudioParams' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, GC_WebWasShot) == 0x000928, "Member 'ABGA_WestSausage_AttachmentPoint_C::GC_WebWasShot' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, ShouldDestroy) == 0x000930, "Member 'ABGA_WestSausage_AttachmentPoint_C::ShouldDestroy' has a wrong offset!");
static_assert(offsetof(ABGA_WestSausage_AttachmentPoint_C, Done_) == 0x000934, "Member 'ABGA_WestSausage_AttachmentPoint_C::Done_' has a wrong offset!");

}

