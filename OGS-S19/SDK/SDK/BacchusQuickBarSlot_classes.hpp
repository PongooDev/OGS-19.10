#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BacchusQuickBarSlot

#include "Basic.hpp"

#include "ItemDisplayStyle_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BacchusQuickBarSlot.BacchusQuickbarSlot_C
// 0x0090 (0x04E0 - 0x0450)
class UBacchusQuickbarSlot_C final : public UBacchusQuickbarSlotBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0450(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Selected;                                          // 0x0458(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class USizeBox*                               _SizeBox__Item;                                    // 0x0460(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DropTarget;                                        // 0x0468(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                IndicatorSlot1;                                    // 0x0470(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                IndicatorSlot2;                                    // 0x0478(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                IndicatorSlot3;                                    // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                IndicatorSlot4;                                    // 0x0488(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                IndicatorSlot5;                                    // 0x0490(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         Multi_SlotsIndicators;                             // 0x0498(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OverlayExtensionWidgets;                           // 0x04A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInvalidationBox*                       QuickBarSlotInvalidationBox;                       // 0x04A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	EItemDisplayStyle                             ItemDisplayStyle;                                  // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B1[0x7];                                      // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EFortItemCooldownType>                 CooldownTypesSupported;                            // 0x04B8(0x0010)(Edit, BlueprintVisible)
	float                                         AnimatedBoxScaleFactor;                            // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldCollapseItemWidgetBorder;                    // 0x04CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsDragHovered;                                     // 0x04CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CE[0x2];                                      // 0x04CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuantitySelector_C*                    Quantity_Selector_Widget;                          // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Native;                                        // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Display_Wide_Items;                            // 0x04D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateItemBoxSize();
	void Update_Item_Box_Size_Native();
	void SetSlotSelected(bool bSelected);
	void SetHovered(bool NewHovered);
	void StartOngoingUse_BP();
	void StartOngoingUse();
	void Setup_Multi_Slot_Indicators();
	void SetAnimatedBoxScaleFactor(float AnimatedBoxScaleFactor_0);
	void PreConstruct(bool IsDesignTime);
	void OnRefreshItem();
	void OnMouseCaptureLost();
	void OnExtensionWidgetAdded(const EUIExtensionSlot ExtensionSlot, class UUserWidget* ExtensionWidget);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	bool OnDragOver(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	void OnDragCancelled(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void IsDragItemDroppable(class UDragDropOperation* Drag_Drop_Object, bool* Is_Droppable);
	void InitializeInvalidation();
	void InitializeCooldowns();
	void Handle_OnQuickbarContentsChanged(EFortQuickBars QuickbarIndex, const TArray<int32>& ChangedSlots);
	void Handle_Drop_Item_Confirmation_Callback(int32 Chosen_Quanitity, class UFortItem* Item_0);
	void ExecuteUbergraph_BacchusQuickbarSlot(int32 EntryPoint);
	void EndInteraction();
	void End_Interaction_BP();
	void Destroy_Quanitity_Selector_Widget();
	void Create_Quantity_Selector_Widget(class UFortWorldItem* Item_0, const class FText& Confirmation_Text);
	void Construct();
	void Cancel_Interaction();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BacchusQuickbarSlot_C">();
	}
	static class UBacchusQuickbarSlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBacchusQuickbarSlot_C>();
	}
};
static_assert(alignof(UBacchusQuickbarSlot_C) == 0x000008, "Wrong alignment on UBacchusQuickbarSlot_C");
static_assert(sizeof(UBacchusQuickbarSlot_C) == 0x0004E0, "Wrong size on UBacchusQuickbarSlot_C");
static_assert(offsetof(UBacchusQuickbarSlot_C, UberGraphFrame) == 0x000450, "Member 'UBacchusQuickbarSlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, Selected) == 0x000458, "Member 'UBacchusQuickbarSlot_C::Selected' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, _SizeBox__Item) == 0x000460, "Member 'UBacchusQuickbarSlot_C::_SizeBox__Item' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, DropTarget) == 0x000468, "Member 'UBacchusQuickbarSlot_C::DropTarget' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, IndicatorSlot1) == 0x000470, "Member 'UBacchusQuickbarSlot_C::IndicatorSlot1' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, IndicatorSlot2) == 0x000478, "Member 'UBacchusQuickbarSlot_C::IndicatorSlot2' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, IndicatorSlot3) == 0x000480, "Member 'UBacchusQuickbarSlot_C::IndicatorSlot3' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, IndicatorSlot4) == 0x000488, "Member 'UBacchusQuickbarSlot_C::IndicatorSlot4' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, IndicatorSlot5) == 0x000490, "Member 'UBacchusQuickbarSlot_C::IndicatorSlot5' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, Multi_SlotsIndicators) == 0x000498, "Member 'UBacchusQuickbarSlot_C::Multi_SlotsIndicators' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, OverlayExtensionWidgets) == 0x0004A0, "Member 'UBacchusQuickbarSlot_C::OverlayExtensionWidgets' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, QuickBarSlotInvalidationBox) == 0x0004A8, "Member 'UBacchusQuickbarSlot_C::QuickBarSlotInvalidationBox' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, ItemDisplayStyle) == 0x0004B0, "Member 'UBacchusQuickbarSlot_C::ItemDisplayStyle' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, CooldownTypesSupported) == 0x0004B8, "Member 'UBacchusQuickbarSlot_C::CooldownTypesSupported' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, AnimatedBoxScaleFactor) == 0x0004C8, "Member 'UBacchusQuickbarSlot_C::AnimatedBoxScaleFactor' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, ShouldCollapseItemWidgetBorder) == 0x0004CC, "Member 'UBacchusQuickbarSlot_C::ShouldCollapseItemWidgetBorder' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, IsDragHovered) == 0x0004CD, "Member 'UBacchusQuickbarSlot_C::IsDragHovered' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, Quantity_Selector_Widget) == 0x0004D0, "Member 'UBacchusQuickbarSlot_C::Quantity_Selector_Widget' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, Use_Native) == 0x0004D8, "Member 'UBacchusQuickbarSlot_C::Use_Native' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, Can_Display_Wide_Items) == 0x0004D9, "Member 'UBacchusQuickbarSlot_C::Can_Display_Wide_Items' has a wrong offset!");

}

