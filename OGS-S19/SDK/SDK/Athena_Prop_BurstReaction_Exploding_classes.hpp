#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Athena_Prop_BurstReaction_Exploding

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Athena_Prop_BurstReaction_classes.hpp"
#include "Athena_DamageStateParticles_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Athena_Prop_BurstReaction_Exploding.Athena_Prop_BurstReaction_Exploding_C
// 0x0178 (0x0EF0 - 0x0D78)
class AAthena_Prop_BurstReaction_Exploding_C : public AAthena_Prop_BurstReaction_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Athena_Prop_BurstReaction_Exploding_C; // 0x0D78(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        PreExplodeAudioComponent;                          // 0x0D80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAthena_DamageStateParticles>   DamageStateParticleSystems;                        // 0x0D88(0x0010)(Edit, BlueprintVisible)
	TArray<class UParticleSystemComponent*>       SpawnedDamageStateEmitters;                        // 0x0D98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         KnockbackAmount;                                   // 0x0DA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DAC[0x4];                                      // 0x0DAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CurrentPlayerToLaunch;                             // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Explode;                                        // 0x0DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ExplosionCUE;                                      // 0x0DC0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HealthIsZero;                                      // 0x0DC8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC9[0x7];                                      // 0x0DC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_MeleeDamage;                                    // 0x0DD0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          CanGenerateResources;                              // 0x0DF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DF1[0x7];                                      // 0x0DF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Radius;                                            // 0x0DF8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         KnockbackStrength;                                 // 0x0E20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UCurveFloat*                            SpawnRampCurve;                                    // 0x0E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OnFireThreshold;                                   // 0x0E50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           FireCue;                                           // 0x0E54(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldDie;                                        // 0x0E5C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E5D[0x3];                                      // 0x0E5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  LastDamageInstigator;                              // 0x0E60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         VehicleDamage;                                     // 0x0E68(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         VehicleImpulseStrength;                            // 0x0E90(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         VehicleImpulseStrengthZ;                           // 0x0EB8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DestroyedByPickAxe;                                // 0x0EE0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EE1[0x7];                                      // 0x0EE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             PreExplodeSound;                                   // 0x0EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DeactivateEmitter();
	void DeathFX();
	void ExecuteFireApplicationInRadiusIfCurieEnabled(class AActor* Fire_Application_Target);
	void ExecuteUbergraph_Athena_Prop_BurstReaction_Exploding(int32 EntryPoint);
	void ExplodeAndDie();
	void ExplosionTrace();
	void FireEffect(const struct FVector& HitLocation);
	void GrowTimeline();
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnFireFx();
	void OnRep_bShouldDie();
	void OnRep_DamageStateNotify();
	void ReceiveBeginPlay();
	bool ShouldDie(float Damage, class AController* EventInstigator, class AActor* DamageCauser);
	void StopGrowTimeline();

	bool BlueprintCanAttemptGenerateResources(const struct FGameplayTagContainer& InTags, class AController* InstigatorController) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Athena_Prop_BurstReaction_Exploding_C">();
	}
	static class AAthena_Prop_BurstReaction_Exploding_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAthena_Prop_BurstReaction_Exploding_C>();
	}
};
static_assert(alignof(AAthena_Prop_BurstReaction_Exploding_C) == 0x000008, "Wrong alignment on AAthena_Prop_BurstReaction_Exploding_C");
static_assert(sizeof(AAthena_Prop_BurstReaction_Exploding_C) == 0x000EF0, "Wrong size on AAthena_Prop_BurstReaction_Exploding_C");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, UberGraphFrame_Athena_Prop_BurstReaction_Exploding_C) == 0x000D78, "Member 'AAthena_Prop_BurstReaction_Exploding_C::UberGraphFrame_Athena_Prop_BurstReaction_Exploding_C' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, PreExplodeAudioComponent) == 0x000D80, "Member 'AAthena_Prop_BurstReaction_Exploding_C::PreExplodeAudioComponent' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, DamageStateParticleSystems) == 0x000D88, "Member 'AAthena_Prop_BurstReaction_Exploding_C::DamageStateParticleSystems' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, SpawnedDamageStateEmitters) == 0x000D98, "Member 'AAthena_Prop_BurstReaction_Exploding_C::SpawnedDamageStateEmitters' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, KnockbackAmount) == 0x000DA8, "Member 'AAthena_Prop_BurstReaction_Exploding_C::KnockbackAmount' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, CurrentPlayerToLaunch) == 0x000DB0, "Member 'AAthena_Prop_BurstReaction_Exploding_C::CurrentPlayerToLaunch' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, GE_Explode) == 0x000DB8, "Member 'AAthena_Prop_BurstReaction_Exploding_C::GE_Explode' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, ExplosionCUE) == 0x000DC0, "Member 'AAthena_Prop_BurstReaction_Exploding_C::ExplosionCUE' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, HealthIsZero) == 0x000DC8, "Member 'AAthena_Prop_BurstReaction_Exploding_C::HealthIsZero' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, TC_MeleeDamage) == 0x000DD0, "Member 'AAthena_Prop_BurstReaction_Exploding_C::TC_MeleeDamage' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, CanGenerateResources) == 0x000DF0, "Member 'AAthena_Prop_BurstReaction_Exploding_C::CanGenerateResources' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, Radius) == 0x000DF8, "Member 'AAthena_Prop_BurstReaction_Exploding_C::Radius' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, KnockbackStrength) == 0x000E20, "Member 'AAthena_Prop_BurstReaction_Exploding_C::KnockbackStrength' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, SpawnRampCurve) == 0x000E48, "Member 'AAthena_Prop_BurstReaction_Exploding_C::SpawnRampCurve' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, OnFireThreshold) == 0x000E50, "Member 'AAthena_Prop_BurstReaction_Exploding_C::OnFireThreshold' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, FireCue) == 0x000E54, "Member 'AAthena_Prop_BurstReaction_Exploding_C::FireCue' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, bShouldDie) == 0x000E5C, "Member 'AAthena_Prop_BurstReaction_Exploding_C::bShouldDie' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, LastDamageInstigator) == 0x000E60, "Member 'AAthena_Prop_BurstReaction_Exploding_C::LastDamageInstigator' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, VehicleDamage) == 0x000E68, "Member 'AAthena_Prop_BurstReaction_Exploding_C::VehicleDamage' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, VehicleImpulseStrength) == 0x000E90, "Member 'AAthena_Prop_BurstReaction_Exploding_C::VehicleImpulseStrength' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, VehicleImpulseStrengthZ) == 0x000EB8, "Member 'AAthena_Prop_BurstReaction_Exploding_C::VehicleImpulseStrengthZ' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, DestroyedByPickAxe) == 0x000EE0, "Member 'AAthena_Prop_BurstReaction_Exploding_C::DestroyedByPickAxe' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_BurstReaction_Exploding_C, PreExplodeSound) == 0x000EE8, "Member 'AAthena_Prop_BurstReaction_Exploding_C::PreExplodeSound' has a wrong offset!");

}

