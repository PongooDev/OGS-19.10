#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_LowGravity_Jump

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_LowGravity_Jump.GA_LowGravity_Jump_C
// 0x0040 (0x0AE8 - 0x0AA8)
class UGA_LowGravity_Jump_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AA8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         LaunchSpeedIdle;                                   // 0x0AB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchSpeedWalking;                                // 0x0AB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchSpeedSprinting;                              // 0x0AB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchAngleIdle;                                   // 0x0ABC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchAngleWalking;                                // 0x0AC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchAngleSprinting;                              // 0x0AC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         JumpType;                                          // 0x0AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         JumpIdle;                                          // 0x0AC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         JumpWalk;                                          // 0x0ACA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         JumpSprint;                                        // 0x0ACB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ACC[0x4];                                      // 0x0ACC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerPawn_Athena_C*                   PlayerPawn;                                        // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           LiftOffCue;                                        // 0x0AD8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           LandCue;                                           // 0x0AE0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_LowGravity_Jump(int32 EntryPoint);
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void SetVariablesFromRows();

	bool K2_ShouldAbilityRespondToEvent(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayEventData& Payload) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_LowGravity_Jump_C">();
	}
	static class UGA_LowGravity_Jump_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_LowGravity_Jump_C>();
	}
};
static_assert(alignof(UGA_LowGravity_Jump_C) == 0x000008, "Wrong alignment on UGA_LowGravity_Jump_C");
static_assert(sizeof(UGA_LowGravity_Jump_C) == 0x000AE8, "Wrong size on UGA_LowGravity_Jump_C");
static_assert(offsetof(UGA_LowGravity_Jump_C, UberGraphFrame) == 0x000AA8, "Member 'UGA_LowGravity_Jump_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_LowGravity_Jump_C, LaunchSpeedIdle) == 0x000AB0, "Member 'UGA_LowGravity_Jump_C::LaunchSpeedIdle' has a wrong offset!");
static_assert(offsetof(UGA_LowGravity_Jump_C, LaunchSpeedWalking) == 0x000AB4, "Member 'UGA_LowGravity_Jump_C::LaunchSpeedWalking' has a wrong offset!");
static_assert(offsetof(UGA_LowGravity_Jump_C, LaunchSpeedSprinting) == 0x000AB8, "Member 'UGA_LowGravity_Jump_C::LaunchSpeedSprinting' has a wrong offset!");
static_assert(offsetof(UGA_LowGravity_Jump_C, LaunchAngleIdle) == 0x000ABC, "Member 'UGA_LowGravity_Jump_C::LaunchAngleIdle' has a wrong offset!");
static_assert(offsetof(UGA_LowGravity_Jump_C, LaunchAngleWalking) == 0x000AC0, "Member 'UGA_LowGravity_Jump_C::LaunchAngleWalking' has a wrong offset!");
static_assert(offsetof(UGA_LowGravity_Jump_C, LaunchAngleSprinting) == 0x000AC4, "Member 'UGA_LowGravity_Jump_C::LaunchAngleSprinting' has a wrong offset!");
static_assert(offsetof(UGA_LowGravity_Jump_C, JumpType) == 0x000AC8, "Member 'UGA_LowGravity_Jump_C::JumpType' has a wrong offset!");
static_assert(offsetof(UGA_LowGravity_Jump_C, JumpIdle) == 0x000AC9, "Member 'UGA_LowGravity_Jump_C::JumpIdle' has a wrong offset!");
static_assert(offsetof(UGA_LowGravity_Jump_C, JumpWalk) == 0x000ACA, "Member 'UGA_LowGravity_Jump_C::JumpWalk' has a wrong offset!");
static_assert(offsetof(UGA_LowGravity_Jump_C, JumpSprint) == 0x000ACB, "Member 'UGA_LowGravity_Jump_C::JumpSprint' has a wrong offset!");
static_assert(offsetof(UGA_LowGravity_Jump_C, PlayerPawn) == 0x000AD0, "Member 'UGA_LowGravity_Jump_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_LowGravity_Jump_C, LiftOffCue) == 0x000AD8, "Member 'UGA_LowGravity_Jump_C::LiftOffCue' has a wrong offset!");
static_assert(offsetof(UGA_LowGravity_Jump_C, LandCue) == 0x000AE0, "Member 'UGA_LowGravity_Jump_C::LandCue' has a wrong offset!");

}

