#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Fort_Pickup_Creative

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Fort_Pickup_Creative.Fort_Pickup_Creative_C
// 0x0048 (0x0708 - 0x06C0)
class AFort_Pickup_Creative_C final : public AFortPickupCreative
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortMinigameLogicComponent*            FortMinigameLogic;                                 // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCreative_UseRestriction_Component_C*   Creative_UseRestriction_Component;                 // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCreativePickupItemCostComponent_C*     CreativePickupItemCostComponent;                   // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PickupSphere;                                      // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Allowed_Team;                                      // 0x06E8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         Allowed_Class;                                     // 0x06EC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         AffectsTeam;                                       // 0x06F0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         AffectsClass;                                      // 0x06F4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemsVisibleToAllowedOnly;                         // 0x06F8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6FC[0x4];                                      // 0x06FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           UpdateVisibilityTimerHandle;                       // 0x0700(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateVisibilityAndCollision();
	void UpdateAllowedTeamSettings();
	void UpdateAllowedClassSettings();
	void Set_Pickup_Settings(int32 NewAllowedTeam, int32 NewAllowedClass, int32 NewAffectsTeam, int32 NewAffectsClass, int32 NewItemsVisibleToAllowedOnly);
	void OnRep_Allowed_Class();
	void OnRep_AffectsTeam();
	void OnRep_AffectsClass();
	void ExecuteUbergraph_Fort_Pickup_Creative(int32 EntryPoint);
	void ReceiveBeginPlay();
	void BndEvt__PickupSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnRep_ItemsVisibleToAllowedOnly();
	void OnRep_Allowed_Team();
	void ApplySubscriptionToPlayerChangesTeamOrClass(bool Subscribe);

	bool BlueprintClassAllowed(const class AFortPawn* Pawn) const;
	bool BlueprintTeamAllowed(const class AFortPawn* Pawn) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Fort_Pickup_Creative_C">();
	}
	static class AFort_Pickup_Creative_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFort_Pickup_Creative_C>();
	}
};
static_assert(alignof(AFort_Pickup_Creative_C) == 0x000008, "Wrong alignment on AFort_Pickup_Creative_C");
static_assert(sizeof(AFort_Pickup_Creative_C) == 0x000708, "Wrong size on AFort_Pickup_Creative_C");
static_assert(offsetof(AFort_Pickup_Creative_C, UberGraphFrame) == 0x0006C0, "Member 'AFort_Pickup_Creative_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AFort_Pickup_Creative_C, FortMinigameLogic) == 0x0006C8, "Member 'AFort_Pickup_Creative_C::FortMinigameLogic' has a wrong offset!");
static_assert(offsetof(AFort_Pickup_Creative_C, Creative_UseRestriction_Component) == 0x0006D0, "Member 'AFort_Pickup_Creative_C::Creative_UseRestriction_Component' has a wrong offset!");
static_assert(offsetof(AFort_Pickup_Creative_C, CreativePickupItemCostComponent) == 0x0006D8, "Member 'AFort_Pickup_Creative_C::CreativePickupItemCostComponent' has a wrong offset!");
static_assert(offsetof(AFort_Pickup_Creative_C, PickupSphere) == 0x0006E0, "Member 'AFort_Pickup_Creative_C::PickupSphere' has a wrong offset!");
static_assert(offsetof(AFort_Pickup_Creative_C, Allowed_Team) == 0x0006E8, "Member 'AFort_Pickup_Creative_C::Allowed_Team' has a wrong offset!");
static_assert(offsetof(AFort_Pickup_Creative_C, Allowed_Class) == 0x0006EC, "Member 'AFort_Pickup_Creative_C::Allowed_Class' has a wrong offset!");
static_assert(offsetof(AFort_Pickup_Creative_C, AffectsTeam) == 0x0006F0, "Member 'AFort_Pickup_Creative_C::AffectsTeam' has a wrong offset!");
static_assert(offsetof(AFort_Pickup_Creative_C, AffectsClass) == 0x0006F4, "Member 'AFort_Pickup_Creative_C::AffectsClass' has a wrong offset!");
static_assert(offsetof(AFort_Pickup_Creative_C, ItemsVisibleToAllowedOnly) == 0x0006F8, "Member 'AFort_Pickup_Creative_C::ItemsVisibleToAllowedOnly' has a wrong offset!");
static_assert(offsetof(AFort_Pickup_Creative_C, UpdateVisibilityTimerHandle) == 0x000700, "Member 'AFort_Pickup_Creative_C::UpdateVisibilityTimerHandle' has a wrong offset!");

}

